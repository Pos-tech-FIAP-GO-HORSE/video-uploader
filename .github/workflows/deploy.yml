name: Build and Deploy Lambda

on:
  push:
    branches:
      - main

env:
  STATEMENT_ID: sns-invoke-permission
  AWS_REGION: us-east-1
  LAMBDA_FUNCTION_NAME: upload-video-lambda
  SNS_TOPIC_NAME: upload-video-topic

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Grant execute permission to Gradle wrapper
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Upload Lambda Artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-jar
          path: build/libs/*.jar

  create-rds:
    runs-on: ubuntu-latest
    needs: build
    environment: production

    outputs:
      db-host: ${{ steps.get-endpoint.outputs.db_host }}

    steps:
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create PostgreSQL RDS Instance
        run: |
          DB_INSTANCE_IDENTIFIER="uploadvideospostech"
          DB_NAME="${{ secrets.DB_NAME }}"
          DB_USER="${{ secrets.DB_USER }}"
          DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          DB_INSTANCE_CLASS="db.t3.micro"
          DB_ENGINE="postgres"
          DB_PORT=5432
          VPC_SECURITY_GROUP="sg-0ca4bdbfb3154b655"

          echo "Tentando criar a instância RDS..."

          set +e
          aws rds create-db-instance \
            --db-instance-identifier $DB_INSTANCE_IDENTIFIER \
            --allocated-storage 20 \
            --db-instance-class $DB_INSTANCE_CLASS \
            --engine $DB_ENGINE \
            --master-username $DB_USER \
            --master-user-password $DB_PASSWORD \
            --db-name $DB_NAME \
            --vpc-security-group-ids $VPC_SECURITY_GROUP \
            --port $DB_PORT \
            --backup-retention-period 7 \
            --publicly-accessible \
            --region us-east-1 2> error.log
          EXIT_CODE=$?
          set -e

          if grep -q "DBInstanceAlreadyExists" error.log; then
            echo "A instância já existe. Continuando..."
          elif [ $EXIT_CODE -ne 0 ]; then
            echo "Erro ao criar a instância RDS:"
            cat error.log
            exit $EXIT_CODE
          fi

      - name: Espera até a instância RDS estar disponível
        run: |
          echo "Aguardando a instância RDS estar disponível..."
          aws rds wait db-instance-available --db-instance-identifier uploadvideospostech
          echo "Instância RDS está pronta!"

      - name: Pegar endpoint da instância
        id: get-endpoint
        run: |
          ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier uploadvideospostech \
            --query "DBInstances[0].Endpoint.Address" \
            --output text)
          echo "db_host=$ENDPOINT" >> $GITHUB_OUTPUT

  deploy:
    needs: create-rds
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Download Lambda Artifact
        uses: actions/download-artifact@v4
        with:
          name: lambda-jar
          path: lambda-jar

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Cria bucket se não existir
        run: |
          BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null || \
          aws s3api create-bucket --bucket "$BUCKET_NAME" --region us-east-1

      - name: Descobrir nome do .jar
        id: jar
        run: |
          JAR_FILE=$(ls lambda-jar/*.jar | head -n 1)
          echo "jar=$JAR_FILE" >> $GITHUB_OUTPUT

      - name: Instalar tree e listar diretórios
        run: |
          sudo apt-get update
          sudo apt-get install -y tree
          tree /home/runner/work/

      - name: Upload JAR para o S3
        run: |
          JAR_FILE=$(ls lambda-jar/*.jar | head -n 1)
          aws s3 cp "$JAR_FILE" s3://${{ secrets.S3_BUCKET_NAME }}/lambda-artifacts/

      - name: Verifica se a função Lambda existe
        id: check-lambda
        run: |
          set +e
          aws lambda get-function --function-name upload-video-lambda --region us-east-1 > /dev/null 2>&1
          echo "exists=$?" >> $GITHUB_OUTPUT
          set -e

      - name: Cria função Lambda caso não exista
        if: steps.check-lambda.outputs.exists != '0'
        run: |
          aws lambda create-function \
            --function-name upload-video-lambda \
            --runtime java17 \
            --role arn:aws:iam::${{ secrets.AWS_USER_ID }}:role/${{ secrets.AWS_ROLE_S3_AND_LAMBDA_FULL}} \
            --handler br.com.postech.videoupload.lambda.LambdaHandler \
            --code S3Bucket=${{ secrets.S3_BUCKET_NAME }},S3Key=lambda-artifacts/$(basename lambda-jar/*.jar) \
            --timeout 30 \
            --memory-size 1024 \
            --region us-east-1 \
            --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},DB_HOST=${{ needs.create-rds.outputs.db-host }},DB_NAME=${{ secrets.DB_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }}}"

      - name: Atualiza código da Lambda (se ela já existir)
        if: steps.check-lambda.outputs.exists == '0'
        run: |
          aws lambda update-function-code \
            --function-name upload-video-lambda \
            --s3-bucket ${{ secrets.S3_BUCKET_NAME }} \
            --s3-key lambda-artifacts/$(basename lambda-jar/*.jar) \
            --region us-east-1

          aws lambda update-function-configuration \
            --function-name upload-video-lambda \
            --environment Variables="{SNS_TOPIC_ARN=${{ secrets.SNS_TOPIC_ARN }},DB_HOST=${{ needs.create-rds.outputs.db-host }},DB_NAME=${{ secrets.DB_NAME }},DB_USER=${{ secrets.DB_USER }},DB_PASSWORD=${{ secrets.DB_PASSWORD }}}" \
            --region us-east-1

      



  configure-sns-lambda:
    needs: deploy
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Grant SNS permission to invoke Lambda
        run: |
          aws lambda add-permission \
            --function-name $LAMBDA_FUNCTION_NAME \
            --statement-id $STATEMENT_ID \
            --action lambda:InvokeFunction \
            --principal sns.amazonaws.com \
            --source-arn arn:aws:sns:us-east-1:${{ secrets.AWS_USER_ID }}:$SNS_TOPIC_NAME \
            --region us-east-1 || echo "Permissão já existe ou falhou silenciosamente"

      - name: Subscribe Lambda to SNS topic
        run: |
          aws sns subscribe \
            --topic-arn arn:aws:sns:us-east-1:${{ secrets.AWS_USER_ID }}:$SNS_TOPIC_NAME \
            --protocol lambda \
            --notification-endpoint arn:aws:lambda:us-east-1:${{ secrets.AWS_USER_ID }}:function:$LAMBDA_FUNCTION_NAME \
            --region us-east-1